<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>测试外部 on 叶灰灰的小窝</title>
    <link>https://habyss.github.io/</link>
    <description>Recent content in 测试外部 on 叶灰灰的小窝</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-cn</language>
    <lastBuildDate>Thu, 01 Dec 2022 15:36:53 +0800</lastBuildDate><atom:link href="https://habyss.github.io/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>大文件分片上传</title>
      <link>https://habyss.github.io/posts/tech/big_file_upload/</link>
      <pubDate>Thu, 01 Dec 2022 15:36:53 +0800</pubDate>
      
      <guid>https://habyss.github.io/posts/tech/big_file_upload/</guid>
      <description>简单demo和多线程合并文件优化</description>
    </item>
    
    <item>
      <title>基于mybatis-plus typeHandler 加解密简单实现</title>
      <link>https://habyss.github.io/posts/tech/mybatis_plus_typehandler/</link>
      <pubDate>Tue, 23 Aug 2022 15:36:53 +0800</pubDate>
      
      <guid>https://habyss.github.io/posts/tech/mybatis_plus_typehandler/</guid>
      <description>💡 不可以对查询参数加解密 💡 不会修改原对象数据 💡 对于手写sql需要特殊指定 💡 对于非sql的CRUD可自动加解密 1. 非sql查询 — 数据库实体类 1 2</description>
    </item>
    
    <item>
      <title>OpenFeign优化</title>
      <link>https://habyss.github.io/posts/tech/openfeign/</link>
      <pubDate>Fri, 24 Jun 2022 15:36:53 +0800</pubDate>
      
      <guid>https://habyss.github.io/posts/tech/openfeign/</guid>
      <description>一、超时优化 OpenFeign 底层内置了 Ribbon 框架，并且使用了 Ribbon 的请求连接超时时间和请求处理超时时间作为其超时时间，而 Ribbon 默认的请求连接超时时间和请求处理超时时间</description>
    </item>
    
    <item>
      <title>resilience4j-spring-boot2 熔断</title>
      <link>https://habyss.github.io/posts/tech/resilience4j_%E7%86%94%E6%96%AD/</link>
      <pubDate>Thu, 12 May 2022 15:36:53 +0800</pubDate>
      
      <guid>https://habyss.github.io/posts/tech/resilience4j_%E7%86%94%E6%96%AD/</guid>
      <description>pom 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 &amp;lt;dependencies&amp;gt; &amp;lt;!-- resilience4j 按需引入 或 all--&amp;gt; &amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;io.github.resilience4j&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;resilience4j-ratelimiter&amp;lt;/artifactId&amp;gt; &amp;lt;version&amp;gt;${resilience4jVersion}&amp;lt;/version&amp;gt; &amp;lt;/dependency&amp;gt; &amp;lt;!-- resilience4j 按需引入 或 all--&amp;gt; &amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;io.github.resilience4j&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;resilience4j-all&amp;lt;/artifactId&amp;gt; version&amp;gt;${resilience4jVersion}&amp;lt;/version&amp;gt; &amp;lt;/dependency&amp;gt; &amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;io.github.resilience4j&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;resilience4j-spring-boot2&amp;lt;/artifactId&amp;gt; &amp;lt;version&amp;gt;${resilience4jVersion}&amp;lt;/version&amp;gt; &amp;lt;/dependency&amp;gt; &amp;lt;!-- 想使用resilienc</description>
    </item>
    
    <item>
      <title>单例模式双重检查</title>
      <link>https://habyss.github.io/posts/tech/single_double/</link>
      <pubDate>Thu, 23 Sep 2021 15:36:53 +0800</pubDate>
      
      <guid>https://habyss.github.io/posts/tech/single_double/</guid>
      <description>标准写法 1 2 3 4 5 6 7 8 9 10 11 12 13 // 单例模式双重检查 private volatile static Singleton client; public static Singleton getSingleton() { if (client == null) { synchronized (Singleton.class) { if (client == null) { client = new Singleton(); } } } return client; } 线程并发涉及三个概念:</description>
    </item>
    
    <item>
      <title>阿里云/天翼云文件上传 单例优化</title>
      <link>https://habyss.github.io/posts/tech/oss_file_upload/</link>
      <pubDate>Thu, 26 Aug 2021 15:36:53 +0800</pubDate>
      
      <guid>https://habyss.github.io/posts/tech/oss_file_upload/</guid>
      <description>1. 阿里云文件上传 前提设置好bucket和相应的url controller 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 @Value(&amp;#34;${oss.bucket}&amp;#34;) private String bucketName; @Value(&amp;#34;${oss.fileURL}&amp;#34;) private String OSS_URL; @PostMapping(&amp;#34;singleUpload&amp;#34;) @ApiOperation(&amp;#</description>
    </item>
    
    <item>
      <title>短链服务实现</title>
      <link>https://habyss.github.io/posts/tech/shorturl/</link>
      <pubDate>Thu, 01 Jul 2021 15:36:53 +0800</pubDate>
      
      <guid>https://habyss.github.io/posts/tech/shorturl/</guid>
      <description>简单demo代码, 短链生成算法, 重定向方式, 存储方式和缓存根据业务情况实现</description>
    </item>
    
    <item>
      <title>模板模式&amp;策略模式-登录优化</title>
      <link>https://habyss.github.io/posts/tech/%E6%A8%A1%E6%9D%BF%E6%A8%A1%E5%BC%8F%E7%AD%96%E7%95%A5%E6%A8%A1%E5%BC%8F-%E7%99%BB%E5%BD%95%E4%BC%98%E5%8C%96/</link>
      <pubDate>Tue, 22 Sep 2020 15:36:53 +0800</pubDate>
      
      <guid>https://habyss.github.io/posts/tech/%E6%A8%A1%E6%9D%BF%E6%A8%A1%E5%BC%8F%E7%AD%96%E7%95%A5%E6%A8%A1%E5%BC%8F-%E7%99%BB%E5%BD%95%E4%BC%98%E5%8C%96/</guid>
      <description>策略模式 策略模式是一种行为模式，也是替代大量 if else 的利器。他能帮你解决的场景，一般是具有同类可替代的行为逻辑算法场景。 比如： 不同类型的交易方式</description>
    </item>
    
    <item>
      <title>TraceId 日志跟踪</title>
      <link>https://habyss.github.io/posts/tech/springboot_traceid/</link>
      <pubDate>Wed, 23 Oct 2019 15:36:53 +0800</pubDate>
      
      <guid>https://habyss.github.io/posts/tech/springboot_traceid/</guid>
      <description>全局拦截, 在 MDC 中插入自定义 traceId 💡 MDC（Mapped Diagnostic Context）机制实现，支持主流的Log4j、Log4j2和Logback日志框架。 1</description>
    </item>
    
    <item>
      <title>rabbitmq ack 探索</title>
      <link>https://habyss.github.io/posts/tech/rabbitmq_ack/</link>
      <pubDate>Sun, 16 Jun 2019 15:36:53 +0800</pubDate>
      
      <guid>https://habyss.github.io/posts/tech/rabbitmq_ack/</guid>
      <description>RabbitMq 生产者确认消息被消费 探索 消费者手动ack的一些状态, 生产者是不能准确得知的. 例如: 1 2 // 处理失败 重新进入队列 继续消费 channel.basicNack(msg.getMessageProperties().getDeliveryTag(), false,true); 当消费者把消息重新</description>
    </item>
    
    <item>
      <title>rabbitmq限流Qos 多个消费者同时消费一个消息</title>
      <link>https://habyss.github.io/posts/tech/rabbitmq_qos_random/</link>
      <pubDate>Mon, 20 May 2019 15:36:53 +0800</pubDate>
      
      <guid>https://habyss.github.io/posts/tech/rabbitmq_qos_random/</guid>
      <description>高并发情况下 RabbitMQ 服务限流 spring下默认为250, 若默写服务需要限流或者需要强制顺序性执行, 则需要自定义qos 1 2 3 4 5 @RabbitHandler @RabbitListener(queues = QueueConstant.RE_SMS_ORDER_NOT_PAID_QUEUE) public void process(Channel channel, Message message)</description>
    </item>
    
    <item>
      <title>rabbitmq实现延时队列</title>
      <link>https://habyss.github.io/posts/tech/rabbitmq_delay/</link>
      <pubDate>Fri, 12 Apr 2019 15:36:53 +0800</pubDate>
      
      <guid>https://habyss.github.io/posts/tech/rabbitmq_delay/</guid>
      <description>方式一: 原生RabbitMq延时队列 💡缺点: 每个队列的消息是顺序的, 靠后的过期时间短的消息并不能先执行 配置队列 机制 “死信”是RabbitMQ</description>
    </item>
    
    <item>
      <title>基于springboot常用aop方式</title>
      <link>https://habyss.github.io/posts/tech/springboot_aop/</link>
      <pubDate>Sun, 03 Feb 2019 15:36:53 +0800</pubDate>
      
      <guid>https://habyss.github.io/posts/tech/springboot_aop/</guid>
      <description>方式一: 基于表达式 例如简单日志打印: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 @Slf4j @Aspect @Component public class WebLogAspect { /** * xxx包及其子包下的以Contro</description>
    </item>
    
    <item>
      <title>UML类图关系</title>
      <link>https://habyss.github.io/posts/tech/uml/</link>
      <pubDate>Tue, 22 Jan 2019 15:36:53 +0800</pubDate>
      
      <guid>https://habyss.github.io/posts/tech/uml/</guid>
      <description>UML类图关系 💡 UML 全称Unified Modeling Language, 统计建模语言. UML类图中有六种关系，从弱到强依次是： 依赖关系 &amp;lt; 关联关系 &amp;lt; 聚合关系 &amp;lt; 组合关系 &amp;lt; 实现关</description>
    </item>
    
    <item>
      <title>@Transactional失效排查</title>
      <link>https://habyss.github.io/posts/tech/transactional/</link>
      <pubDate>Thu, 03 Jan 2019 15:36:53 +0800</pubDate>
      
      <guid>https://habyss.github.io/posts/tech/transactional/</guid>
      <description>@Transactional失效 整合shiro之后，UserRealm类里自动注入的service中的@Transactional注解失效 解</description>
    </item>
    
    <item>
      <title>$ref-fastjson排查</title>
      <link>https://habyss.github.io/posts/tech/ref-fastjson/</link>
      <pubDate>Thu, 20 Dec 2018 15:36:53 +0800</pubDate>
      
      <guid>https://habyss.github.io/posts/tech/ref-fastjson/</guid>
      <description>$ref-fastjson 问题排查 问题排查 项目返回的数据中出现$ref数据 查询得知是fastjson的特性循环引用 fastjson支持循环引用，并且是缺省打开的。 当</description>
    </item>
    
    <item>
      <title>SpringBoot中时间戳和LocalDateTime相关的接收和转换</title>
      <link>https://habyss.github.io/posts/tech/springboot_localdatetime/</link>
      <pubDate>Mon, 10 Dec 2018 15:36:53 +0800</pubDate>
      
      <guid>https://habyss.github.io/posts/tech/springboot_localdatetime/</guid>
      <description>SpringBoot中时间戳和LocalDateTime相关的接收和转换 前言 一般情况下, 前端和后端在时间格式的传递上都走的是时间戳（方便前端</description>
    </item>
    
    <item>
      <title>小鹤双拼</title>
      <link>https://habyss.github.io/posts/tool/%E5%B0%8F%E9%B9%A4%E5%8F%8C%E6%8B%BC/</link>
      <pubDate>Fri, 30 Nov 2018 15:36:53 +0800</pubDate>
      
      <guid>https://habyss.github.io/posts/tool/%E5%B0%8F%E9%B9%A4%E5%8F%8C%E6%8B%BC/</guid>
      <description>小鹤双拼 方案一 win + R，输入 regedit，打开注册表 找到 计算机\HKEY_CURRENT_USER\Software\Microsoft\I</description>
    </item>
    
    <item>
      <title>Mysql Explain 简解</title>
      <link>https://habyss.github.io/posts/tech/mysql_explain/</link>
      <pubDate>Thu, 29 Nov 2018 15:36:53 +0800</pubDate>
      
      <guid>https://habyss.github.io/posts/tech/mysql_explain/</guid>
      <description>Mysql-explain id id相同时, 执行顺序由上而下 id不同时, 执行顺序由大到小, 一般为子查询 select_type 查询类型, 常见的值有: SIMPLE: 简单查询, 不包含UNION或者子查询 PRIMARY: 查</description>
    </item>
    
    <item>
      <title>测试</title>
      <link>https://habyss.github.io/posts/tech/%E6%B5%8B%E8%AF%95/</link>
      <pubDate>Thu, 29 Nov 2018 15:00:25 +0800</pubDate>
      
      <guid>https://habyss.github.io/posts/tech/%E6%B5%8B%E8%AF%95/</guid>
      <description>Hugo+Github Pages 1. 安装Scoop win系统, 在hugo官网中也推荐了使用Scoop来进行包管理 打开PowerShell并运行, 保证允许本地脚本的执行 1 set-executionpolicy</description>
    </item>
    
    
    
  </channel>
</rss>
